{"ast":null,"code":"var _jsxFileName = \"/Users/victorli/Workspace/reality-hack/frontend/src/Drawing.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Drawing() {\n  _s();\n  const [drawing, setDrawing] = useState(false);\n  const [minX, setMinX] = useState(1000);\n  const [minY, setMinY] = useState(1000);\n  const [maxX, setMaxX] = useState(-1);\n  const [maxY, setMaxY] = useState(-1);\n  const [canvasDone, setCanvasDone] = useState(false);\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const drawLine = (x1, y1, x2, y2, color) => {\n    const ctx = canvas.getContext('2d');\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n    ctxRef.current = ctx;\n  };\n  const confirmCanvas = () => {\n    setCanvasDone(true);\n    drawLine(minX, minY, minX, maxY);\n    drawLine(minX, maxY, maxX, maxY);\n    drawLine(maxX, maxY, maxX, minY);\n    drawLine(maxX, minY, minX, minY);\n  };\n  const updateCanvas = (x, y) => {\n    if (x < minX) setMinX(x);\n    if (y < minY) setMinY(y);\n    if (x > maxX) setMaxX(x);\n    if (y > maxY) setMaxY(y);\n  };\n  const startDraw = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(offsetX, offsetY);\n    setDrawing(true);\n    if (!canvasDone) updateCanvas(offsetX, offsetY);\n  };\n  const stopDraw = () => {\n    ctxRef.current.closePath();\n    setDrawing(false);\n  };\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    if (!drawing) return;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    ctxRef.current.lineTo(offsetX, offsetY);\n    ctxRef.current.stroke();\n    if (!canvasDone) updateCanvas(offsetX, offsetY);\n  };\n  const clear = () => {\n    ctxRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    // For supporting computers with higher screen densities, we double the screen density\n    // canvas.width = window.innerWidth * 2;\n    // canvas.height = window.innerHeight * 2;\n    // canvas.style.width = `800px`;\n    // canvas.style.height = `600px`;\n    // Setting the context to enable us draw\n    const ctx = canvas.getContext('2d');\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = 'blue';\n    ctx.lineWidth = 2;\n    ctxRef.current = ctx;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      // onClick={onClick}\n      onMouseDown: startDraw,\n      onMouseUp: stopDraw,\n      onMouseMove: draw,\n      ref: canvasRef,\n      width: 960,\n      height: 640\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Drawing, \"bTdoayA3x/xaQHGAG0OFbPvTphA=\");\n_c = Drawing;\nexport default Drawing;\nvar _c;\n$RefreshReg$(_c, \"Drawing\");","map":{"version":3,"names":["useEffect","useRef","useState","Drawing","drawing","setDrawing","minX","setMinX","minY","setMinY","maxX","setMaxX","maxY","setMaxY","canvasDone","setCanvasDone","canvasRef","ctxRef","drawLine","x1","y1","x2","y2","color","ctx","canvas","getContext","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","current","confirmCanvas","updateCanvas","x","y","startDraw","nativeEvent","offsetX","offsetY","stopDraw","closePath","draw","clear","clearRect","width","height","lineCap"],"sources":["/Users/victorli/Workspace/reality-hack/frontend/src/Drawing.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nfunction Drawing() {\n    const [drawing, setDrawing] = useState(false);\n    const [minX, setMinX] = useState(1000);\n    const [minY, setMinY] = useState(1000);\n    const [maxX, setMaxX] = useState(-1);\n    const [maxY, setMaxY] = useState(-1);\n    const [canvasDone, setCanvasDone] = useState(false);\n    const canvasRef = useRef(null);\n    const ctxRef = useRef(null);\n\n    const drawLine = (x1, y1, x2, y2, color) => {\n        const ctx = canvas.getContext('2d');\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        ctxRef.current = ctx;\n    }\n    const confirmCanvas = () => {\n        setCanvasDone(true);\n        drawLine(minX, minY, minX, maxY);\n        drawLine(minX, maxY, maxX, maxY);\n        drawLine(maxX, maxY, maxX, minY);\n        drawLine(maxX, minY, minX, minY);\n    }\n    const updateCanvas = (x, y) => {\n        if (x < minX) setMinX(x);\n        if (y < minY) setMinY(y);\n        if (x > maxX) setMaxX(x);\n        if (y > maxY) setMaxY(y);\n    }\n    const startDraw = ({ nativeEvent }) => {\n        const { offsetX, offsetY } = nativeEvent;\n        ctxRef.current.beginPath();\n        ctxRef.current.moveTo(offsetX, offsetY);\n        setDrawing(true);\n        if (!canvasDone) updateCanvas(offsetX, offsetY);\n    };\n    const stopDraw = () => {\n        ctxRef.current.closePath();\n        setDrawing(false);\n    };\n    const draw = ({ nativeEvent }) => {\n        if (!drawing) return;\n        const { offsetX, offsetY } = nativeEvent;\n        ctxRef.current.lineTo(offsetX, offsetY);\n        ctxRef.current.stroke();\n        if (!canvasDone) updateCanvas(offsetX, offsetY);\n    };\n    const clear = () => {\n        ctxRef.current.clearRect(\n        0,\n        0,\n        canvasRef.current.width,\n        canvasRef.current.height\n        );\n    };\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        // For supporting computers with higher screen densities, we double the screen density\n        // canvas.width = window.innerWidth * 2;\n        // canvas.height = window.innerHeight * 2;\n        // canvas.style.width = `800px`;\n        // canvas.style.height = `600px`;\n        // Setting the context to enable us draw\n        const ctx = canvas.getContext('2d');\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = 'blue';\n        ctx.lineWidth = 2;\n        ctxRef.current = ctx;\n      }, []);\n    return (\n        <>\n            <canvas\n                // onClick={onClick}\n                onMouseDown={startDraw}\n                onMouseUp={stopDraw}\n                onMouseMove={draw}\n                ref={canvasRef}\n                width={960} \n                height={640}\n            />\n        </>\n    );\n}\n\nexport default Drawing;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/victorli/Workspace/reality-hack/frontend/src/Drawing.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport square from './assets/square.png';\nimport circle from './assets/circle.png';\nimport axios from \"axios\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Drawing() {\n  _s();\n  const [drawing, setDrawing] = useState(false);\n  const [minX, setMinX] = useState(1000);\n  const [minY, setMinY] = useState(1000);\n  const [maxX, setMaxX] = useState(-1);\n  const [maxY, setMaxY] = useState(-1);\n  const [canvasDone, setCanvasDone] = useState(false);\n  const [activeImg, setActiveImg] = useState(\"\");\n  const [objs, setObjs] = useState([]);\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const addObj = () => {\n    console.log(\"set\");\n    axios({\n      method: \"POST\",\n      url: \"/data/add\",\n      params: {\n        \"type\": \"square\",\n        \"x\": 480,\n        \"y\": 320\n      }\n    }).then(response => {\n      console.log(response);\n    });\n  };\n  const getObjs = () => {\n    axios({\n      method: \"GET\",\n      url: \"/data\"\n    }).then(response => {\n      setObjs(response.data);\n    });\n  };\n  const drawLine = (x1, y1, x2, y2, color) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n    ctxRef.current = ctx;\n  };\n  const confirmCanvas = () => {\n    setCanvasDone(true);\n    clear();\n    drawLine(minX, minY, minX, maxY, \"black\");\n    drawLine(minX, maxY, maxX, maxY, \"black\");\n    drawLine(maxX, maxY, maxX, minY, \"black\");\n    drawLine(maxX, minY, minX, minY, \"black\");\n    console.log(\"done\", maxX - minX, maxY - minY);\n  };\n  const updateCanvas = (x, y) => {\n    if (x < minX) setMinX(x);\n    if (y < minY) setMinY(y);\n    if (x > maxX) setMaxX(x);\n    if (y > maxY) setMaxY(y);\n  };\n  const startDraw = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    if (canvasDone) return;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(offsetX, offsetY);\n    setDrawing(true);\n    if (!canvasDone) updateCanvas(offsetX, offsetY);\n  };\n  const stopDraw = () => {\n    if (canvasDone) return;\n    ctxRef.current.closePath();\n    setDrawing(false);\n  };\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    if (canvasDone) return;\n    if (!drawing) return;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    ctxRef.current.lineTo(offsetX, offsetY);\n    ctxRef.current.stroke();\n    if (!canvasDone) updateCanvas(offsetX, offsetY);\n  };\n  const clear = () => {\n    ctxRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  };\n  const onMouseDownImage = event => {\n    console.log(event);\n  };\n  const onMouseUpImage = event => {\n    console.log(\"up\");\n  };\n  const onMouseMoveImage = event => {\n    console.log(\"move\");\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = 'blue';\n    ctx.lineWidth = 2;\n    ctxRef.current = ctx;\n  }, []);\n  useEffect(() => {}, [objs]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getObjs();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        width: \"960\",\n        height: \"640\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        onMouseDown: startDraw,\n        onMouseUp: stopDraw,\n        onMouseMove: draw,\n        ref: canvasRef,\n        width: 960,\n        height: 640\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), canvasDone && objs && objs.map((obj, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: square,\n        width: 50,\n        style: {\n          left: obj.x * (maxX - minX) + minX,\n          top: obj.y * (maxY - minY) + minY,\n          position: \"absolute\"\n        },\n        onMouseDown: onMouseDownImage,\n        onMouseUp: onMouseUpImage,\n        onMouseMove: onMouseMoveImage\n      }, obj.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: confirmCanvas,\n      children: \"Done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Drawing, \"Xm6t/oZ23huQi57atHHLteLq/Dg=\");\n_c = Drawing;\nexport default Drawing;\nvar _c;\n$RefreshReg$(_c, \"Drawing\");","map":{"version":3,"names":["useEffect","useRef","useState","square","circle","axios","Drawing","drawing","setDrawing","minX","setMinX","minY","setMinY","maxX","setMaxX","maxY","setMaxY","canvasDone","setCanvasDone","activeImg","setActiveImg","objs","setObjs","canvasRef","ctxRef","addObj","console","log","method","url","params","then","response","getObjs","data","drawLine","x1","y1","x2","y2","color","canvas","current","ctx","getContext","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","confirmCanvas","clear","updateCanvas","x","y","startDraw","nativeEvent","offsetX","offsetY","stopDraw","closePath","draw","clearRect","width","height","onMouseDownImage","event","onMouseUpImage","onMouseMoveImage","lineCap","interval","setInterval","clearInterval","position","map","obj","index","left","top","id"],"sources":["/Users/victorli/Workspace/reality-hack/frontend/src/Drawing.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport square from './assets/square.png';\nimport circle from './assets/circle.png';\nimport axios from \"axios\";\n\nfunction Drawing() {\n    const [drawing, setDrawing] = useState(false);\n    const [minX, setMinX] = useState(1000);\n    const [minY, setMinY] = useState(1000);\n    const [maxX, setMaxX] = useState(-1);\n    const [maxY, setMaxY] = useState(-1);\n    const [canvasDone, setCanvasDone] = useState(false);\n    const [activeImg, setActiveImg] = useState(\"\");\n    const [objs, setObjs] = useState([]);\n    const canvasRef = useRef(null);\n    const ctxRef = useRef(null);\n\n    const addObj = () => {\n        console.log(\"set\");\n        axios({\n            method: \"POST\",\n            url:\"/data/add\",\n            params:{\n                \"type\": \"square\",\n                \"x\": 480,\n                \"y\": 320,\n            }\n        })\n        .then((response) => {\n            console.log(response);\n        });\n    }\n    const getObjs = () => {\n        axios({\n            method: \"GET\",\n            url:\"/data\",\n        })\n        .then((response) => {\n            setObjs(response.data);\n        });\n    }\n    const drawLine = (x1, y1, x2, y2, color) => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        ctxRef.current = ctx;\n    }\n    const confirmCanvas = () => {\n        setCanvasDone(true);\n        clear();\n        drawLine(minX, minY, minX, maxY, \"black\");\n        drawLine(minX, maxY, maxX, maxY, \"black\");\n        drawLine(maxX, maxY, maxX, minY, \"black\");\n        drawLine(maxX, minY, minX, minY, \"black\");\n        console.log(\"done\", maxX - minX, maxY - minY);\n    }\n    const updateCanvas = (x, y) => {\n        if (x < minX) setMinX(x);\n        if (y < minY) setMinY(y);\n        if (x > maxX) setMaxX(x);\n        if (y > maxY) setMaxY(y);\n    }\n    const startDraw = ({ nativeEvent }) => {\n        if (canvasDone) return;\n        const { offsetX, offsetY } = nativeEvent;\n        ctxRef.current.beginPath();\n        ctxRef.current.moveTo(offsetX, offsetY);\n        setDrawing(true);\n        if (!canvasDone) updateCanvas(offsetX, offsetY);\n    };\n    const stopDraw = () => {\n        if (canvasDone) return;\n        ctxRef.current.closePath();\n        setDrawing(false);\n    };\n    const draw = ({ nativeEvent }) => {\n        if (canvasDone) return;\n        if (!drawing) return;\n        const { offsetX, offsetY } = nativeEvent;\n        ctxRef.current.lineTo(offsetX, offsetY);\n        ctxRef.current.stroke();\n        if (!canvasDone) updateCanvas(offsetX, offsetY);\n    };\n    const clear = () => {\n        ctxRef.current.clearRect(\n        0,\n        0,\n        canvasRef.current.width,\n        canvasRef.current.height\n        );\n    };\n    const onMouseDownImage = (event) => {\n        console.log(event);\n    }\n    const onMouseUpImage = (event) => {\n        console.log(\"up\");\n    }\n    const onMouseMoveImage = (event) => {\n        console.log(\"move\");\n    }\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = 'blue';\n        ctx.lineWidth = 2;\n        ctxRef.current = ctx;\n    }, []);\n    useEffect(() => {\n\n    }, [objs]);\n    useEffect(() => {\n        const interval = setInterval(() => {\n            getObjs();\n        }, 1000);\n        return () => clearInterval(interval);\n      }, []);\n    return (\n        <>\n            <div style={{position:\"relative\", width:\"960\", height:\"640\"}}>\n                <canvas\n                    onMouseDown={startDraw}\n                    onMouseUp={stopDraw}\n                    onMouseMove={draw}\n                    ref={canvasRef}\n                    width={960} \n                    height={640}\n                />\n                {canvasDone && objs && objs.map((obj, index) => (\n                    <img key={obj.id} src={square} width={50} \n                        style={{left:obj.x * (maxX - minX) + minX, top:obj.y * (maxY - minY)  + minY, position:\"absolute\"}}\n                        onMouseDown={onMouseDownImage}\n                        onMouseUp={onMouseUpImage}\n                        onMouseMove={onMouseMoveImage}\n                    />\n                ))}\n            </div>\n            \n            <button onClick={confirmCanvas}>Done</button>\n            {/* <img src={square} width={50}/>\n            <img src={circle} width={40}/>\n            <button onClick={addObj}>Add</button> */}\n        </>\n    );\n}\n\nexport default Drawing;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}